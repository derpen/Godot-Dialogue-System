[gd_scene load_steps=6 format=3 uid="uid://dgwydnjkbagj5"]

[ext_resource type="PackedScene" uid="uid://b55ybw77u563" path="res://interactable/interactable.tscn" id="1_cpyd4"]
[ext_resource type="PackedScene" uid="uid://t5x38d5w0gmf" path="res://interactable/interactable_action.tscn" id="2_btrd3"]

[sub_resource type="GDScript" id="GDScript_btrd3"]
script/source = "@tool
class_name PossibleActions extends Resource

enum ACTION_TYPE { NORMAL_DIALOGUE, CHOICE, ITEM }

@export var action_type : ACTION_TYPE:
	set(new_action_type):
		action_type = new_action_type ## Needed?
		notify_property_list_changed()
		

var dialogues : Array[String]

## Choice related
## key would be choices, value would be the next Action to call
## key would be shown as label for Choice Buttons in Player.tscn
var choices : Dictionary[String, PossibleActions]


## Item related
## Will always check before giving
## if item already given, move on to the next action (if any)
var item_to_check : String
var item_to_give : String
var dialogues_item_check_fail : Array[String]
var dialogues_item_check_success : Array[String]

var has_given_item : bool = false ## If item given already, will just skip this


## Conditional export voodoo (why tf is this so complicated)
func _get_property_list():
	if Engine.is_editor_hint():
		var ret : Array[Dictionary] = []
		if action_type == ACTION_TYPE.NORMAL_DIALOGUE:
			ret.append({
				\"name\": &\"dialogues\",
				\"type\": TYPE_ARRAY,
				\"hint_string\" : \"%d/%d:\" % [TYPE_STRING, PROPERTY_HINT_MULTILINE_TEXT],
				\"usage\": PROPERTY_USAGE_EDITOR | PROPERTY_USAGE_STORAGE | PROPERTY_USAGE_SCRIPT_VARIABLE
			})

		if action_type == ACTION_TYPE.CHOICE:
			ret.append({
				\"name\": &\"choices\",
				\"type\": TYPE_DICTIONARY,
				\"hint\": PROPERTY_HINT_DICTIONARY_TYPE,
				# \"hint_string\" : \"4:;24/17:PossibleActions\", ## Same thing as below, this one is just less readable
				\"hint_string\" : \"%d:;%d/%d:PossibleActions\" % [TYPE_STRING, TYPE_OBJECT, PROPERTY_HINT_RESOURCE_TYPE],
				\"usage\": PROPERTY_USAGE_EDITOR | PROPERTY_USAGE_STORAGE | PROPERTY_USAGE_SCRIPT_VARIABLE
			})

		if action_type == ACTION_TYPE.ITEM:
			ret.append({
				\"name\": &\"item_to_check\",
				\"type\": TYPE_STRING,
				\"usage\": PROPERTY_USAGE_DEFAULT,
			})
			ret.append({
				\"name\": &\"item_to_give\",
				\"type\": TYPE_STRING,
				\"usage\": PROPERTY_USAGE_DEFAULT,
			})
			ret.append({
				\"name\": &\"dialogues_item_check_fail\",
				\"type\": TYPE_ARRAY,
				\"hint_string\" : \"%d/%d:\" % [TYPE_STRING, PROPERTY_HINT_MULTILINE_TEXT],
				\"usage\": PROPERTY_USAGE_EDITOR | PROPERTY_USAGE_STORAGE | PROPERTY_USAGE_SCRIPT_VARIABLE
			})
			ret.append({
				\"name\": &\"dialogues_item_check_success\",
				\"type\": TYPE_ARRAY,
				\"hint_string\" : \"%d/%d:\" % [TYPE_STRING, PROPERTY_HINT_MULTILINE_TEXT],
				\"usage\": PROPERTY_USAGE_EDITOR | PROPERTY_USAGE_STORAGE | PROPERTY_USAGE_SCRIPT_VARIABLE
			})

		return ret
"

[sub_resource type="BoxShape3D" id="BoxShape3D_ljj7u"]

[sub_resource type="BoxMesh" id="BoxMesh_ljj7u"]

[node name="Chair" type="StaticBody3D"]
collision_layer = 5
collision_mask = 0

[node name="Interactable" parent="." node_paths=PackedStringArray("focus_target") instance=ExtResource("1_cpyd4")]
focus_target = NodePath("../FocusTarget")

[node name="InteractableAction" parent="Interactable" instance=ExtResource("2_btrd3")]
action_type = 1
choices = Dictionary[String, SubResource("GDScript_btrd3")]({})

[node name="CollisionShape3D" type="CollisionShape3D" parent="."]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0.5, 0)
shape = SubResource("BoxShape3D_ljj7u")

[node name="MeshInstance3D" type="MeshInstance3D" parent="."]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0.5, 0)
mesh = SubResource("BoxMesh_ljj7u")

[node name="FocusTarget" type="Node3D" parent="."]
